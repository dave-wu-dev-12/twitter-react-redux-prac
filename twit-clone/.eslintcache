[{"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\index.js":"1","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\reportWebVitals.js":"2","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\App.js":"3","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\left-hand-nav\\LeftHandNav.js":"4","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\postsSection\\PostSection.js":"5","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\left-hand-nav\\left-hand-nav-item\\LeftHandNavItem.js":"6","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\postsSection\\postSectionHeader\\PostSectionHeader.js":"7","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\left-hand-nav\\userInfo\\UserInfo.js":"8","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\postsSection\\postSectionPosts\\PostInput.js":"9","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\postsSection\\postSectionPosts\\posts\\Post.js":"10","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\postsSection\\postExtras\\PostExtras.js":"11","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\store.js":"12","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\loader\\Loader.js":"13","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\messages\\Messages.js":"14"},{"size":718,"mtime":1613017846970,"results":"15","hashOfConfig":"16"},{"size":375,"mtime":1612653660234,"results":"17","hashOfConfig":"16"},{"size":2147,"mtime":1614558536754,"results":"18","hashOfConfig":"16"},{"size":815,"mtime":1612654620886,"results":"19","hashOfConfig":"16"},{"size":3335,"mtime":1614558536755,"results":"20","hashOfConfig":"16"},{"size":2500,"mtime":1614472027976,"results":"21","hashOfConfig":"16"},{"size":230,"mtime":1612657214140,"results":"22","hashOfConfig":"16"},{"size":469,"mtime":1612654620888,"results":"23","hashOfConfig":"16"},{"size":1258,"mtime":1613355385056,"results":"24","hashOfConfig":"16"},{"size":3489,"mtime":1613706253945,"results":"25","hashOfConfig":"16"},{"size":2535,"mtime":1612846469369,"results":"26","hashOfConfig":"16"},{"size":2366,"mtime":1614313658582,"results":"27","hashOfConfig":"16"},{"size":271,"mtime":1613352116014,"results":"28","hashOfConfig":"16"},{"size":1982,"mtime":1614313682079,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1xl1kjv",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\index.js",[],["63","64"],"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\reportWebVitals.js",[],"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\App.js",[],"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\left-hand-nav\\LeftHandNav.js",[],"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\postsSection\\PostSection.js",["65","66"],"import { React, useEffect, useRef } from \"react\";\r\nimport \"./PostSection.css\";\r\nimport PostSectionHeader from \"./postSectionHeader/PostSectionHeader\";\r\nimport PostInput from \"./postSectionPosts/PostInput\";\r\nimport Post from \"./postSectionPosts/posts/Post\";\r\nimport PostExtras from \"./postExtras/PostExtras\";\r\nimport axios from \"axios\";\r\nimport Loader from \"../loader/Loader\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction PostSection() {\r\n  const dispatch = useDispatch();\r\n  const counterRedux = useSelector((state) => state.counter);\r\n  const setOfPosts = useSelector((state) => state.posts);\r\n  const isPageLoading = useSelector((state) => state.loading);\r\n  const tweetInputRef = useRef(\"\");\r\n\r\n  //load posts on page load\r\n  useEffect(() => {\r\n    // set the load screen\r\n    dispatch({ type: \"set_loader\", loadValue: true });\r\n\r\n    // mock server request\r\n    setTimeout(() => {\r\n      axios\r\n        .get(\"https://jsonplaceholder.typicode.com/posts\")\r\n        .then((res) => {\r\n          dispatch({ type: \"init_posts\", posts: res });\r\n        })\r\n        .catch((error) => {});\r\n    }, 2000);\r\n\r\n    return () => {};\r\n  }, []);\r\n\r\n  const submitPost = () => {\r\n    dispatch({ type: \"set_loader\", loadValue: true });\r\n\r\n    console.log(tweetInputRef.current.value);\r\n    let postBody = {};\r\n    postBody.title = \"drako\";\r\n    postBody.body = tweetInputRef.current.value;\r\n    postBody.userId = 1;\r\n\r\n    axios\r\n      .post(\"https://jsonplaceholder.typicode.com/posts\", postBody)\r\n      .then((res) => {\r\n        dispatch({ type: \"add_post\", postToAdd: res.data });\r\n      })\r\n      .catch((error) => {\r\n        // show error message\r\n      });\r\n  };\r\n\r\n  const updatePost = (updatedPost) => {\r\n    dispatch({ type: \"set_loader\", loadValue: true });\r\n\r\n    console.log(tweetInputRef.current.value);\r\n    let postBody = { ...updatedPost };\r\n\r\n    axios\r\n      .put(\r\n        \"https://jsonplaceholder.typicode.com/posts/\" + updatedPost.id,\r\n        postBody\r\n      )\r\n      .then((res) => {\r\n        dispatch({ type: \"update_post\", updatedPost: res.data });\r\n      })\r\n      .catch((error) => {\r\n        // show error message\r\n      });\r\n  };\r\n\r\n  const deletePost = (id) => {\r\n    //postToDeleteId\r\n    dispatch({ type: \"set_loader\", loadValue: true });\r\n    axios\r\n      .delete(\"https://jsonplaceholder.typicode.com/posts/\" + id)\r\n      .then((res) => {\r\n        dispatch({ type: \"delete_post\", postToDeleteId: id });\r\n      })\r\n      .catch((error) => {\r\n        // show error message\r\n      });\r\n  };\r\n\r\n  // build the list of posts\r\n  let listOfPostsHandler = null;\r\n  listOfPostsHandler = setOfPosts.map((post) => {\r\n    return (\r\n      <Post\r\n        body={post.body}\r\n        title={post.title}\r\n        userId={post.userId}\r\n        id={post.id}\r\n        updatePost={updatePost}\r\n        deletePost={deletePost}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"postSection_container\">\r\n      <div className=\"feed_container\">\r\n        <PostSectionHeader />\r\n        <PostInput tweetInputRef={tweetInputRef} submitPost={submitPost} />\r\n        <hr />\r\n        {isPageLoading ? <Loader /> : listOfPostsHandler}\r\n      </div>\r\n      <div className=\"extra_container\">\r\n        <PostExtras />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostSection;\r\n","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\left-hand-nav\\left-hand-nav-item\\LeftHandNavItem.js",["67"],"import React from \"react\";\r\nimport \"./LeftHandNavItem.css\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction LeftHandNavItem({ text }) {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  let leftHandNavItemRow = null;\r\n  switch (text) {\r\n    case \"Home\":\r\n      leftHandNavItemRow = (\r\n        <div\r\n          className=\"leftHandNavItem_Container\"\r\n          onClick={() => navigateToRoute(\"/\")}\r\n        >\r\n          <HomeIcon className=\"itemIcon\" /> <h2>{text}</h2>\r\n        </div>\r\n      );\r\n      break;\r\n    case \"Explore\":\r\n      leftHandNavItemRow = (\r\n        <div\r\n          className=\"leftHandNavItem_Container\"\r\n          onClick={() => navigateToRoute(`/${text}`)}\r\n        >\r\n          <ExploreIcon className=\"itemIcon\" /> <h2>{text}</h2>\r\n        </div>\r\n      );\r\n      break;\r\n    case \"Notifications\":\r\n      leftHandNavItemRow = (\r\n        <div\r\n          className=\"leftHandNavItem_Container\"\r\n          onClick={() => navigateToRoute(`/${text}`)}\r\n        >\r\n          <NotificationsIcon className=\"itemIcon\" /> <h2>{text}</h2>\r\n        </div>\r\n      );\r\n      break;\r\n    case \"Messages\":\r\n      leftHandNavItemRow = (\r\n        <div\r\n          className=\"leftHandNavItem_Container\"\r\n          onClick={() => navigateToRoute(`/${text}`)}\r\n        >\r\n          <EmailIcon className=\"itemIcon\" /> <h2>{text}</h2>\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    default:\r\n      leftHandNavItemRow = (\r\n        <img\r\n          onClick={() => navigateToRoute(\"/\")}\r\n          className=\"siteIconImage\"\r\n          src=\"https://i.pinimg.com/originals/5c/a9/8c/5ca98c73b2bb7a02bf8350933c7ca443.png\"\r\n          alt=\"logo\"\r\n        />\r\n      );\r\n      break;\r\n  }\r\n\r\n  const navigateToRoute = (path) => {\r\n    if (path !== history.location.pathname) {\r\n      // clear posts before route change\r\n      dispatch({ type: \"clear_localPosts\", loadValue: true });\r\n      dispatch({ type: \"clear_localMessages\", loadValue: true });\r\n    }\r\n\r\n    // router is smart enough to not rerender a comp if we are on the page\r\n    // and attempt to navigate to it through the push\r\n    history.push(`${path}`);\r\n  };\r\n\r\n  return <div>{leftHandNavItemRow}</div>;\r\n}\r\n\r\nexport default LeftHandNavItem;\r\n","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\postsSection\\postSectionHeader\\PostSectionHeader.js",[],"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\left-hand-nav\\userInfo\\UserInfo.js",[],"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\postsSection\\postSectionPosts\\PostInput.js",[],"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\postsSection\\postSectionPosts\\posts\\Post.js",[],"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\postsSection\\postExtras\\PostExtras.js",[],"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\store.js",["68","69"],"const initialState = {\r\n  posts: [],\r\n  loading: false,\r\n  authenticated: false,\r\n  messages: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  // action is the object being passed to dispatch function\r\n  // in the functional component\r\n\r\n  // we return a new complete state object so that the\r\n  // useselectors can get the updated state value it is listening for\r\n  // so that we can have an updated state in the reducer\r\n  // and so that we dont alter any of the other states not involved\r\n\r\n  // remember to do a copy of the ref object your are editing\r\n  // if you are editing an array, make a copy of the array or return a copy\r\n  // if you are editing an object make a copy of the obj\r\n  // if you are editing an obj in an array, copy obj, edit, copy array, insert obj into array\r\n\r\n  switch (action.type) {\r\n    case \"init_posts\":\r\n      let setOfPosts = [...action.posts.data];\r\n      return {\r\n        ...state,\r\n        posts: setOfPosts,\r\n        loading: false,\r\n      };\r\n\r\n    case \"init_messages\":\r\n      let setOfMessages = [...action.messages.data];\r\n      return {\r\n        ...state,\r\n        messages: setOfMessages,\r\n        loading: false,\r\n      };\r\n\r\n    case \"add_post\":\r\n      let newPosts = [...state.posts, action.postToAdd];\r\n      return {\r\n        ...state,\r\n        posts: newPosts,\r\n        loading: false,\r\n      };\r\n\r\n    case \"set_loader\":\r\n      return {\r\n        ...state,\r\n        loading: action.loadValue,\r\n      };\r\n\r\n    case \"update_post\":\r\n      let updatedPosts = state.posts.map((post) => {\r\n        if (post.id == action.updatedPost.id) {\r\n          return action.updatedPost;\r\n        } else {\r\n          return post;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        posts: updatedPosts,\r\n        loading: false,\r\n      };\r\n\r\n    case \"delete_post\":\r\n      let remainingPosts = state.posts.filter(\r\n        (post) => post.id != action.postToDeleteId\r\n      );\r\n      return {\r\n        ...state,\r\n        posts: remainingPosts,\r\n        loading: false,\r\n      };\r\n\r\n    case \"clear_localPosts\":\r\n      return {\r\n        ...state,\r\n        posts: [],\r\n        loading: true,\r\n      };\r\n\r\n    case \"clear_localMessages\":\r\n      return {\r\n        ...state,\r\n        messages: [],\r\n        loading: true,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\loader\\Loader.js",[],"F:\\devStuff\\twitter-react-redux-prac\\twit-clone\\src\\messages\\Messages.js",["70"],"import { React, useRef, useEffect } from \"react\";\r\nimport \"./Messages.css\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Loader from \"../loader/Loader\";\r\nimport axios from \"axios\";\r\n\r\nfunction Messages() {\r\n  const dispatch = useDispatch();\r\n\r\n  const searchInputRef = useRef(\"\");\r\n  const isPageLoading = useSelector((state) => state.loading);\r\n  const setOfMessages = useSelector((state) => state.messages);\r\n\r\n  //load posts on page load\r\n  useEffect(() => {\r\n    // set the load screen\r\n    dispatch({ type: \"set_loader\", loadValue: true });\r\n\r\n    // mock server request\r\n    setTimeout(() => {\r\n      axios\r\n        .get(\"https://jsonplaceholder.typicode.com/posts\")\r\n        .then((res) => {\r\n          dispatch({ type: \"init_messages\", messages: res });\r\n        })\r\n        .catch((error) => {});\r\n    }, 2000);\r\n\r\n    return () => {};\r\n  }, []);\r\n\r\n  // build the list of posts\r\n  let listOfMessagessHandler = null;\r\n  listOfMessagessHandler = setOfMessages.map((post) => {\r\n    return (\r\n      <div>\r\n        <h3>{post.body}</h3>\r\n        <h6>{post.title}</h6>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"postSection_container\">\r\n      <div className=\"feed_container\">\r\n        <div className=\"homeSectionContainer\">\r\n          <h3>Messages</h3>\r\n        </div>\r\n        <div className=\"postInput_container\">\r\n          <AccountCircleIcon className=\"avatarIcon\" />\r\n          <div className=\"postInput_form\">\r\n            <input\r\n              ref={searchInputRef}\r\n              type=\"text\"\r\n              placeholder=\"Search for people and groups\"\r\n              className=\"postInput_input\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        {isPageLoading ? <Loader /> : listOfMessagessHandler}\r\n      </div>\r\n      <div className=\"extra_container\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Messages;\r\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":15,"column":9,"nodeType":"77","messageId":"78","endLine":15,"endColumn":21},{"ruleId":"79","severity":1,"message":"80","line":36,"column":6,"nodeType":"81","endLine":36,"endColumn":8,"suggestions":"82"},{"ruleId":"75","severity":1,"message":"83","line":7,"column":22,"nodeType":"77","messageId":"78","endLine":7,"endColumn":26},{"ruleId":"84","severity":1,"message":"85","line":55,"column":21,"nodeType":"86","messageId":"87","endLine":55,"endColumn":23},{"ruleId":"84","severity":1,"message":"88","line":69,"column":27,"nodeType":"86","messageId":"87","endLine":69,"endColumn":29},{"ruleId":"79","severity":1,"message":"80","line":32,"column":6,"nodeType":"81","endLine":32,"endColumn":8,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'counterRedux' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["92"],"'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"94","fix":"96"},"Update the dependencies array to be: [dispatch]",{"range":"97","text":"98"},{"range":"99","text":"98"},[1199,1201],"[dispatch]",[969,971]]